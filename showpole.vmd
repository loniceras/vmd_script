proc dip {filename {selection all} {color lime} {scale 3} {radius 0.1}} {
#This script is used to draw electric dipole moments of atoms
#filename.xyz, multiple.txt, atom_moment.txt should be presented in current folder

color Display Background white
axes location off
display depthcue off
display rendermode GLSL
light 2 off
light 3 on
color Element C silver
color change rgb 6 0.800000 0.800000 0.800000
material change specular Opaque 0.200000

proc helpp {} {
puts "Available Commands: dip filename selection color scale radius"
puts "selection = all / noh"
}

set topidx [molinfo top]
foreach i [molinfo list] {
mol delete $i
}

mol new $filename.xyz
mol modstyle 0 [expr $topidx+1] Licorice 0.1 22.0 22.0
mol modmaterial 0 [expr $topidx+1] Opaque
mol modcolor 0 [expr $topidx+1] Element

draw delete all
draw material Transparent
draw color $color
set sel [atomselect top $selection]
#Cycle selected atoms
foreach idx [$sel list] {
	set file [open atom_moment.txt r]
	set foundatm 0
	set iatm [expr $idx+1]
	set labelname [format "Atom%6d" $iatm]
	while {[gets $file line] != -1} {
		if {[string first $labelname $line] != -1} {
			set foundatm 1
			puts " Information of atom $iatm"
			set atmx [[atomselect top "serial $iatm"] get x]
			set atmy [[atomselect top "serial $iatm"] get y]
			set atmz [[atomselect top "serial $iatm"] get z]
			gets $file line
			scan $line " Atomic dipole moment:%f %f %f" vecx vecy vecz
			set norm [expr sqrt($vecx**2 + $vecy**2 + $vecz**2)]
			puts [format " Atomic dipole moment:%8.3f %8.3f %8.3f  Norm:%8.3f" $vecx $vecy $vecz $norm]
			drawarrow "serial $iatm" $vecx $vecy $vecz $scale $radius 0
			break
		}
	}
	close $file
	puts " "
	if {$foundatm == 0} {puts " Error: Unable to find information of atom $iatm"}
}
puts "Done!"
}

proc quadp {filename {selection all} {color lime} {scale 1} {mode 1} {resolution 30} {lowaniso 0}} {
#This script is used to draw electric quadrupole moments of atoms
#filename.xyz, multiple.txt, atom_moment.txt should be presented in current folder

color Display Background white
axes location off
display depthcue off
display rendermode GLSL
light 2 off
light 3 on
color Element C silver
color change rgb 6 0.800000 0.800000 0.800000
material change specular Opaque 0.200000

proc helpp {} {
puts "Available Commands: quadp filename selection color scale mode resolution lowaniso"
puts "selection = all / noh"
puts "mode = 1 / 2"
puts "lowaniso = 0 / 1"
}

set topidx [molinfo top]
foreach i [molinfo list] {
mol delete $i
}

mol new $filename.xyz
mol modstyle 0 [expr $topidx+1] Licorice 0.1 22.0 22.0
mol modmaterial 0 [expr $topidx+1] Opaque
mol modcolor 0 [expr $topidx+1] Element

draw delete all
draw material Transparent
draw color $color
set sel [atomselect top $selection]
#Cycle selected atoms
foreach idx [$sel list] {
	set file [open atom_moment.txt r]
	set foundatm 0
	set iatm [expr $idx+1]
	set labelname [format "Atom%6d" $iatm]
	while {[gets $file line] != -1} {
		if {[string first $labelname $line] != -1} {
			set foundatm 1
			puts " Information of atom $iatm"
			set atmx [[atomselect top "serial $iatm"] get x]
			set atmy [[atomselect top "serial $iatm"] get y]
			set atmz [[atomselect top "serial $iatm"] get z]
			gets $file line
			gets $file line
			for {set i 1} {$i <= 3} {incr i} {
				gets $file line
				scan $line " Eigenvalue $i:%f  Eigenvector:%f %f %f" eigval($i) eigvec(1,$i) eigvec(2,$i) eigvec(3,$i)
				#puts [format " Eigenvalue 1:%8.3f  Eigenvector:%8.3f %8.3f %8.3f" $eigval($i) $eigvec(1,$i) $eigvec(2,$i) $eigvec(3,$i)]
				if {$i == 1} {set eigvalmin $eigval(1)}
				if {$mode == 1} {
					if {$lowaniso == 0} {
						set eigval($i) [expr $eigval($i)+(1-$eigvalmin)]
					} else {
						set eigval($i) [expr sqrt($eigval($i)+(1-$eigvalmin))]
					}
				} else {
					if {$lowaniso == 0} {
						set eigval($i) [expr 1.0/($eigval($i)+(1-$eigvalmin))]
					} else {
						set eigval($i) [expr 1.0/sqrt($eigval($i)+(1-$eigvalmin))]
					}
				}
			}
			set fac [ expr $scale/($eigval(1)+$eigval(2)+$eigval(3)) ]
			for {set i 1} {$i <= 3} {incr i} {
				set eigval($i) [expr $fac*$eigval($i)]
				puts [format " Principal axis $i:%8.3f %8.3f %8.3f  Semi-axis length: %8.3f" $eigvec(1,$i) $eigvec(2,$i) $eigvec(3,$i) $eigval($i)]
			}
			ellipsoid $eigval(1) $eigval(2) $eigval(3) $atmx $atmy $atmz $resolution \
			$eigvec(1,1) $eigvec(1,2) $eigvec(1,3) $eigvec(2,1) $eigvec(2,2) $eigvec(2,3) $eigvec(3,1) $eigvec(3,2) $eigvec(3,3)
			break
		}
	}
	close $file
	puts " "
	if {$foundatm == 0} {puts " Error: Unable to find information of atom $iatm"}
}
puts "Done!"
}

proc drawarrow {atmrange fragdx fragdy fragdz {scl 1} {rad 0.2} {showgoc 1}} {
#This script is used to draw arrow

#Determine arrow center
set sel [atomselect top $atmrange]
set cen [measure center $sel]
set cenx [lindex $cen 0]
set ceny [lindex $cen 1]
set cenz [lindex $cen 2]
if {$showgoc==1} {puts "Geometry center: $cenx $ceny $cenz"}

#Scale vector
set fragdx [expr $fragdx*$scl]
set fragdy [expr $fragdy*$scl]
set fragdz [expr $fragdz*$scl]

#Draw arrow
set body 0.75
set begx [expr $cenx-$fragdx/2]
set begy [expr $ceny-$fragdy/2]
set begz [expr $cenz-$fragdz/2]
set endx [expr $cenx+$fragdx*$body-$fragdx/2]
set endy [expr $ceny+$fragdy*$body-$fragdy/2]
set endz [expr $cenz+$fragdz*$body-$fragdz/2]
draw cylinder "$begx $begy $begz" "$endx $endy $endz" radius $rad filled yes resolution 20
set endx2 [expr $cenx+$fragdx/2]
set endy2 [expr $ceny+$fragdy/2]
set endz2 [expr $cenz+$fragdz/2]
draw cone "$endx $endy $endz" "$endx2 $endy2 $endz2" radius [expr $rad*2.5] resolution 20
}

proc ellipsoid {a b c x y z numvert a11 a12 a13 a21 a22 a23 a31 a32 a33} {
#This script is used to draw ellipsoid

# a = Length of semi-axis of ellipsoid in x direction
# b = Length of semi-axis of ellipsoid in y direction
# c = Length of semi-axis of ellipsoid in z direction
# x = X position of ellipsoid center
# y = Y position of ellipsoid center
# z = Z position of ellipsoid center

global M_PI
set minu 0
set maxu [expr $M_PI * 2]
set stepu [expr $maxu / $numvert]
set minv [expr -1*$M_PI]
set maxv [expr $M_PI]
set stepv [expr $maxv / $numvert]
set tiny 0.00001

proc uv2x {a u v} {
  expr {$a*sin($u) * cos($v)} 
}  
proc uv2y {b u v} {
  expr {$b*cos($u) * cos($v)}
}
proc uv2z {c u v} {
  expr {$c*sin($v)} 
}

# Calculate X,Y,Z of ellipse vertices as xdata, ydata, zdata
# u,v are azimuthal and polar angle
for {set u $minu} {$u < [expr $maxu + $tiny]} {set u [expr $u + $stepu]} {
  for {set v $minv} {$v < [expr $maxv + $tiny]} {set v [expr $v + $stepv]} {
    set xdata($u,$v) [uv2x $a $u $v]
    set ydata($u,$v) [uv2y $b $u $v]
    set zdata($u,$v) [uv2z $c $u $v]     
  }
}

# Apply rotation and translation transformations on ellipse vertices
for {set u $minu} {$u < [expr $maxu + $tiny]} {set u [expr $u + $stepu]} {
  for {set v $minv} {$v < [expr $maxv + $tiny]} {set v [expr $v + $stepv]} {
    set xdata_r($u,$v) [expr {($xdata($u,$v)*$a11+$ydata($u,$v)*$a12+$zdata($u,$v)*$a13) + $x}]
    set ydata_r($u,$v) [expr {($xdata($u,$v)*$a21+$ydata($u,$v)*$a22+$zdata($u,$v)*$a23) + $y}]
    set zdata_r($u,$v) [expr {($xdata($u,$v)*$a31+$ydata($u,$v)*$a32+$zdata($u,$v)*$a33) + $z}]
  }
}

# Render triangles for ellipse vertices
for {set u $minu} {$u < [expr $maxu + $tiny - $stepu]} {set u [expr $u + $stepu]} {
  for {set v $minv} {$v < [expr $maxv + $tiny - $stepv]} {set v [expr $v + $stepv]} {
    # Get the next two vertices
    set u2 [expr $u + $stepu]
    set v2 [expr $v + $stepv]
    draw triangle "$xdata_r($u,$v)  $ydata_r($u,$v)  $zdata_r($u,$v)" \
                  "$xdata_r($u2,$v)  $ydata_r($u2,$v)  $zdata_r($u2,$v)" \
                  "$xdata_r($u2,$v2) $ydata_r($u2,$v2) $zdata_r($u2,$v2)"
    draw triangle "$xdata_r($u2,$v2) $ydata_r($u2,$v2) $zdata_r($u2,$v2)" \
                  "$xdata_r($u,$v2) $ydata_r($u,$v2) $zdata_r($u,$v2)" \
                  "$xdata_r($u,$v)  $ydata_r($u,$v)  $zdata_r($u,$v)"
  }
}
}

